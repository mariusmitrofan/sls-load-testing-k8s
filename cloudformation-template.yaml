---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Launch Amazon EKS stack in new or existing VPC'

Parameters:
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: mariusmitrofan
    AllowedPattern : ".+"

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI id for the node instances -> https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
    Default: ami-0f2e8e5663e16b436
    AllowedPattern : ".+"

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: c4.xlarge
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    - r5d.large
    - r5d.xlarge
    - r5d.2xlarge
    - r5d.4xlarge
    - r5d.12xlarge
    - r5d.24xlarge
    - z1d.large
    - z1d.xlarge
    - z1d.2xlarge
    - z1d.3xlarge
    - z1d.6xlarge
    - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    
  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 4
    
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
    Default: 8

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String
    Default: netbears
    AllowedPattern : ".+"

  ClusterVersion:
    Description: The Kubernetes deployed version.
    Type: String
    AllowedValues:
      - "1.13"
      - "1.12"
      - "1.11"
      - "1.10"
    Default: "1.13"

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: netbears-node-group1
    AllowedPattern : ".+"

  UseSpotFleetInstances:
    Type: String
    AllowedValues:
    - 'true'
    - 'false'
    Default: 'true'
    Description: Whether you want the node group to run Spot instances or On-Demand. Default is 'true' (SPOT)

  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id

  SubnetsEksMasterPublic:
    Description: The subnets where workers can be created. Please specify at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id>

  SubnetsEksNodesPrivate:
    Description: The subnets where workers can be created. Please specify at least 2 subnets
    Type: List<AWS::EC2::Subnet::Id>

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EKS Cluster"
        Parameters:
          - ClusterName
          - ClusterVersion
      -
        Label:
          default: "Worker Node Configuration"
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - UseSpotFleetInstances
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - VpcId
          - SubnetsEksMasterPublic
          - SubnetsEksNodesPrivate

Conditions:
  UseSpotFleet:
    Fn::Equals:
      - Ref: UseSpotFleetInstances
      - 'true'

  UseAsg:
    Fn::Equals:
      - Ref: UseSpotFleetInstances
      - 'false'

Mappings:
  Limits:
    m5.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    m5.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    m5.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    m5.4xlarge:
      Cpu: 16
      RootSsdSize: 50
      DockerSsdSize: 200
    m5.12xlarge:
      Cpu: 48
      RootSsdSize: 100
      DockerSsdSize: 430
    m5.24xlarge:
      Cpu: 96
      RootSsdSize: 100
      DockerSsdSize: 750
    m4.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    m4.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    m4.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    m4.4xlarge:
      Cpu: 16
      RootSsdSize: 50
      DockerSsdSize: 200
    m4.10xlarge:
      Cpu: 40
      RootSsdSize: 100
      DockerSsdSize: 430
    m4.16xlarge:
      Cpu: 64
      RootSsdSize: 100
      DockerSsdSize: 750
    c5.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    c5.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    c5.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    c5.4xlarge:
      Cpu: 16
      RootSsdSize: 50
      DockerSsdSize: 200
    c5.9xlarge:
      Cpu: 36
      RootSsdSize: 100
      DockerSsdSize: 430
    c5.18xlarge:
      Cpu: 72
      RootSsdSize: 100
      DockerSsdSize: 750
    c4.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    c4.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    c4.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    c4.4xlarge:
      Cpu: 16
      RootSsdSize: 50
      DockerSsdSize: 200
    c4.8xlarge:
      Cpu: 36
      RootSsdSize: 100
      DockerSsdSize: 430
    g3.4xlarge:
      Cpu: 16
      RootSsdSize: 100
      DockerSsdSize: 430
    g3.8xlarge:
      Cpu: 32
      RootSsdSize: 100
      DockerSsdSize: 430
    g3.16xlarge:
      Cpu: 64
      RootSsdSize: 100
      DockerSsdSize: 750
    g2.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    g2.8xlarge:
      Cpu: 32
      RootSsdSize: 100
      DockerSsdSize: 430
    r3.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    r3.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    r3.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    r3.4xlarge:
      Cpu: 16
      RootSsdSize: 25
      DockerSsdSize: 100
    r3.8xlarge:
      Cpu: 32
      RootSsdSize: 100
      DockerSsdSize: 430
    r4.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    r4.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    r4.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    r4.4xlarge:
      Cpu: 16
      RootSsdSize: 50
      DockerSsdSize: 200
    r4.8xlarge:
      Cpu: 32
      RootSsdSize: 100
      DockerSsdSize: 430
    r4.16xlarge:
      Cpu: 64
      RootSsdSize: 100
      DockerSsdSize: 750
    r5.large:
      Cpu: 2
      RootSsdSize: 25
      DockerSsdSize: 100
    r5.xlarge:
      Cpu: 4
      RootSsdSize: 25
      DockerSsdSize: 100
    r5.2xlarge:
      Cpu: 8
      RootSsdSize: 25
      DockerSsdSize: 100
    r5.4xlarge:
      Cpu: 16

Resources:
  TagSubnetsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal: {Service: [lambda.amazonaws.com]}
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-KMS
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            Resource: '*'
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-CloudWatch
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            - cloudwatch:*
            Resource: '*'

  TagSubnetsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Runtime: python3.7
      Role:
        Fn::GetAtt: TagSubnetsRole.Arn
      Code:
        ZipFile:
          Fn::Sub: |
            import boto3
            import cfnresponse
            import base64
            def lambda_handler(event, context):
              responseValue={}
              client = boto3.client('ec2',region_name="${AWS::Region}")

              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseValue)
              return True

  # TagSubnetsResult:
  #   Type: Custom::TagSubnet
  #   Properties:
  #     ServiceToken:
  #       Fn::GetAtt: TagSubnetsFunction.Arn

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'eks:*'
                  - 'rds:*'
                Resource: '*'

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: AWS::StackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - NodeInstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: 'false'
      DefaultSubnetId:
        Fn::Select:
          - '0'
          - Ref: SubnetsEksNodesPrivate
      VpcId:
        Ref: VpcId
      UseOpsworksSecurityGroups: 'false'
      DefaultOs: Amazon Linux 2
      DefaultRootDeviceType: ebs
      Tags:
        - Key: Application
          Value: k8s
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: k8s
      Shortname: k8s-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps: 'false'
      StackId:
        Ref: OpsWorksStack
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: NodeSecurityGroup.GroupId

  AWSServiceRoleForAmazonEKS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  AWSEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name:
        Ref: ClusterName
      Version:
        Ref: ClusterVersion
      RoleArn:
        Fn::GetAtt: AWSServiceRoleForAmazonEKS.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Ref: ClusterControlPlaneSecurityGroup
        SubnetIds:
          Ref: SubnetsEksMasterPublic

  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Ref: VpcId

  ClusterControlPlaneSecurityGroupIngressToNode:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngressToInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodeInstanceProfile:
    DependsOn: AWSEKSCluster
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: NodeInstanceRole

  NodeInstanceRole:
    DependsOn: AWSEKSCluster
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSOpsWorksRegisterCLI_OnPremises
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-OpsWorks
        PolicyDocument:
          Statement:
          - Action:
            - opsworks:*
            Resource: "*"
            Effect: Allow
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-sts
        PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Resource: "*"
            Effect: Allow

  NodeSecurityGroup:
    DependsOn: AWSEKSCluster
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        Ref: VpcId
      Tags:
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodeSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  SpotFleetIAMRole:
    Condition: UseSpotFleet
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-GetInstanceProfile
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
            - iam:GetInstanceProfile
            Resource: "*"

  SpotFleetIAMAutoScaleRole:
    Condition: UseSpotFleet
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - application-autoscaling.amazonaws.com
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetAutoscaleRole
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole

  SpotFleet:
    Type: AWS::EC2::SpotFleet
    Condition: UseSpotFleet
    DependsOn: AWSEKSCluster
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        ExcessCapacityTerminationPolicy: default
        IamFleetRole:
          Fn::GetAtt:
            - SpotFleetIAMRole
            - Arn
        InstanceInterruptionBehavior: terminate
        ReplaceUnhealthyInstances: true
        SpotPrice: '5'
        TargetCapacity: 
          Ref: NodeAutoScalingGroupMinSize
        TerminateInstancesWithExpiration: true
        LaunchTemplateConfigs:
        - LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: LaunchTemplate
            Version:
              Fn::GetAtt:
                - LaunchTemplate
                - LatestVersionNumber
          Overrides:
          - InstanceType:
              Ref: NodeInstanceType
            WeightedCapacity: '1'
            SubnetId:
              Fn::Select:
                - '0'
                - Ref: SubnetsEksNodesPrivate
          - InstanceType:
              Ref: NodeInstanceType
            WeightedCapacity: '1'
            SubnetId:
              Fn::Select:
                - '1'
                - Ref: SubnetsEksNodesPrivate
  ASG:
    Condition: UseAsg
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AWSEKSCluster
    Properties:
      VPCZoneIdentifier:
        Ref: SubnetsEksNodesPrivate
      HealthCheckGracePeriod: '600'
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId:
          Ref: LaunchTemplate
        Version:
          Fn::GetAtt:
            - LaunchTemplate
            - LatestVersionNumber
      MinSize:
        Ref: NodeAutoScalingGroupMinSize
      MaxSize:
        Ref: NodeAutoScalingGroupMaxSize
      DesiredCapacity:
        Ref: NodeAutoScalingGroupMinSize
      MetricsCollection:
      - Metrics:
        - GroupTotalInstances
        Granularity: 1Minute
      Tags:
        - Key: Name
          Value:
            Fn::Sub: "${ClusterName}-${NodeGroupName}-Node"
          PropagateAtLaunch: 'true'
        - Key:
            Fn::Sub: 'kubernetes.io/cluster/${ClusterName}'
          Value: 'owned'
          PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService:
          Ref: NodeAutoScalingGroupMinSize
        PauseTime: 'PT5M'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        SecurityGroupIds:
        - Fn::GetAtt: NodeSecurityGroup.GroupId
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize:
                Ref: NodeVolumeSize
              VolumeType: gp2
              DeleteOnTermination: true
        DisableApiTermination: false
        EbsOptimized: true
        IamInstanceProfile:
          Arn:
            Fn::GetAtt:
              - NodeInstanceProfile
              - Arn
        ImageId:
          Ref: NodeImageId
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType:
          Ref: NodeInstanceType
        KeyName:
          Ref: KeyName
        Monitoring:
          Enabled: true
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value:
                Fn::Sub: "${ClusterName}-${NodeGroupName}-Node"
            - Key:
                Fn::Sub: 'kubernetes.io/cluster/${ClusterName}'
              Value: 'owned'
        UserData:
          Fn::Base64:
            Fn::Sub: |
              #cloud-config
              packages:
              - jq
              - awscli
              write_files:
              - path: /etc/cron.d/da-monitoring
                content: |
                  AWS_REGION=${AWS::Region}
                  * * * * * root /usr/local/bin/report-cpu-load.sh ${AWS::Region} ${ClusterName}
                permissions: '0600'
              - path: /usr/local/bin/report-cpu-load.sh
                content: |
                  #!/bin/sh
                  set -e
                  region=$1
                  cluster=$2
                  val=$(cat /proc/loadavg | cut -d ' ' -f1)
                  aws cloudwatch put-metric-data --region $region \
                    --namespace Custom/EKS --metric-name CPULoad \
                    --dimensions ClusterName=$cluster --value $val
                permissions: '0755'
              - path: /usr/local/bin/register-opsworks.sh
                content: |
                  #!/bin/bash
                  set -e
                  aws opsworks register --infrastructure-class ec2 --region us-east-1 --stack-id ${OpsWorksStack} --local --use-instance-profile
                  sleep 60
                  ec2_instance_id=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id)
                  instance=$(aws opsworks describe-instances --region us-east-1 --stack-id ${OpsWorksStack} | jq --arg ec2_instance_id "$ec2_instance_id" '.Instances[] | select (.Ec2InstanceId==$ec2_instance_id)' | jq -r .Arn | cut -d'/' -f2)
                  aws opsworks assign-instance --instance-id $instance --layer-ids ${Layer} --region us-east-1
                permissions: '0755'
              runcmd:
              - /usr/local/bin/register-opsworks.sh
              - /etc/eks/bootstrap.sh ${ClusterName}
              - /opt/aws/bin/cfn-signal --exit-code $? --stack  ${AWS::StackName} --resource NodeGroup --region ${AWS::Region}

  ScalableTarget:
    Condition: UseSpotFleet
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      ResourceId:
        Fn::Join:
          - /
          - - spot-fleet-request
            - Ref: SpotFleet
      ServiceNamespace: ec2
      ScalableDimension: ec2:spot-fleet-request:TargetCapacity
      MinCapacity:
        Ref: NodeAutoScalingGroupMinSize
      RoleARN:
        Fn::GetAtt:
          - SpotFleetIAMAutoScaleRole
          - Arn
      MaxCapacity:
        Ref: NodeAutoScalingGroupMaxSize

  SpotFleetCPUUtilizationTargetTracking:
    Condition: UseSpotFleet
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilizationTargetTracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue: 70
        ScaleInCooldown: 3600
        ScaleOutCooldown: 300
        PredefinedMetricSpecification:
          PredefinedMetricType: EC2SpotFleetRequestAverageCPUUtilization

  SpotFleetCPULoadTargetTacking:
    Condition: UseSpotFleet
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPULoadTargetTracking
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        DisableScaleIn: false
        TargetValue:
          Fn::FindInMap:
            - Limits
            - Ref: NodeInstanceType
            - Cpu
        ScaleInCooldown: 3600
        ScaleOutCooldown: 300
        CustomizedMetricSpecification:
          MetricName: CPULoad
          Namespace: Custom/EKS
          Dimensions:
          - Name: ClusterName
            Value:
              Ref: ClusterName
          Statistic: Average

  AsgCpuUtilizationTargetTracking:
    Condition: UseAsg
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        DisableScaleIn: false
        TargetValue: 70
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization

  AsgCpuLoadTargetTracking:
    Condition: UseAsg
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName:
        Ref: ASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        DisableScaleIn: false
        TargetValue:
          Fn::FindInMap:
            - Limits
            - Ref: NodeInstanceType
            - Cpu
        CustomizedMetricSpecification:
          MetricName: CPULoad
          Namespace: Custom/EKS
          Dimensions:
          - Name: ClusterName
            Value:
              Ref: ClusterName
          Statistic: Average

Outputs:
  GetKubeconfigProfile:
    Description: Command to get kubeconfig
    Value:
      Fn::Sub: aws eks --region ${AWS::Region} update-kubeconfig --name ${ClusterName}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-GetKubeconfigProfile"

  NodeInstanceRole:
    Description: The node instance role
    Value:
      Fn::GetAtt: NodeInstanceRole.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeInstanceRole"
  NodeSecurityGroup:
    Description: The security group for the node group
    Value:
      Ref: NodeSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeSecurityGroup"
  Endpoint:
    Description: The endpoint to which you should connect
    Value:
      Fn::GetAtt: AWSEKSCluster.Endpoint
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Endpoint"
  Context:
    Description: The context to use in kubeconfig
    Value:
      Fn::Sub: "arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Context"