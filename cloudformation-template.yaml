---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Launch Amazon EKS stack in new or existing VPC'

Parameters:
  OpsWorksStackName:
    Description: The stack name in which all k8s nodes are joined
    Type: String
    Default: k8s

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    Default: mariusmitrofan
    AllowedPattern : ".+"

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Description: AMI id for the node instances -> https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
    Default: ami-0f2e8e5663e16b436
    AllowedPattern : ".+"

  NodePublicIpAddress:
    Type: String
    Default: 'false'
    AllowedValues:
      - 'false'
      - 'true'
    Description: Whether to provide public IP addresses to nodes. (set as 'false' when creating new VPC and 'true' when deploying in your own VPCs)

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: m4.xlarge
    AllowedValues:
    - t2.small
    - t2.medium
    - t2.large
    - t2.xlarge
    - t2.2xlarge
    - t3.nano
    - t3.micro
    - t3.small
    - t3.medium
    - t3.large
    - t3.xlarge
    - t3.2xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - m5.large
    - m5.xlarge
    - m5.2xlarge
    - m5.4xlarge
    - m5.12xlarge
    - m5.24xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - i3.large
    - i3.xlarge
    - i3.2xlarge
    - i3.4xlarge
    - i3.8xlarge
    - i3.16xlarge
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - r4.large
    - r4.xlarge
    - r4.2xlarge
    - r4.4xlarge
    - r4.8xlarge
    - r4.16xlarge
    - x1.16xlarge
    - x1.32xlarge
    - p2.xlarge
    - p2.8xlarge
    - p2.16xlarge
    - p3.2xlarge
    - p3.8xlarge
    - p3.16xlarge
    - r5.large
    - r5.xlarge
    - r5.2xlarge
    - r5.4xlarge
    - r5.12xlarge
    - r5.24xlarge
    - r5d.large
    - r5d.xlarge
    - r5d.2xlarge
    - r5d.4xlarge
    - r5d.12xlarge
    - r5d.24xlarge
    - z1d.large
    - z1d.xlarge
    - z1d.2xlarge
    - z1d.3xlarge
    - z1d.6xlarge
    - z1d.12xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    
  NodeAutoScalingGroupMinSize:
    Type: Number
    Description: Minimum size of Node Group ASG.
    Default: 1
    
  NodeAutoScalingGroupMaxSize:
    Type: Number
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.
    Default: 4

  NodeVolumeSize:
    Type: Number
    Description: Node volume size
    Default: 20

  ClusterName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String
    Default: netbears
    AllowedPattern : ".+"

  ClusterVersion:
    Description: The Kubernetes deployed version.
    Type: String
    AllowedValues:
      - "1.13"
      - "1.12"
      - "1.11"
      - "1.10"
    Default: "1.13"

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: ""
    Type: String

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String
    Default: netbears-node-group1
    AllowedPattern : ".+"

  NewVpc:
    Type: String
    Default: new
    AllowedValues:
      - new
      - existing
    Description: If "new", CF will provision all necessary VPC settings and launch the stack in the new VPC

  VpcId:
    Description: The VPC of the worker instances
    Type: AWS::EC2::VPC::Id
    Default: vpc-7192df15

  Subnets:
    Description: The subnets where workers can be created.
    Type: List<AWS::EC2::Subnet::Id>
    Default: subnet-d1d412fb,subnet-a28e179f,subnet-9c6ea5c4

  # Subnets
  VPCSubnetCidrBlock:
    Description: 172.23.0.0/16 = 172.23.0.0-172.23.255.255 = 256 Subnets = 65534 hosts
    Type: String
    Default: 172.23.0.0/16
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  AvailabilityZone1:
    Type: String
    Default: a
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone2:
    Type: String
    Default: b
    AllowedValues:
    - a
    - b
    - c
  AvailabilityZone3:
    Type: String
    Default: c
    AllowedValues:
    - a
    - b
    - c
  PublicSubnetCidrBlock1:
    Type: String
    Default: 172.23.0.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock2:
    Type: String
    Default: 172.23.16.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PublicSubnetCidrBlock3:
    Type: String
    Default: 172.23.32.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock1:
    Type: String
    Default: 172.23.48.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock2:
    Type: String
    Default: 172.23.64.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
  PrivateSubnetCidrBlock3:
    Type: String
    Default: 172.23.80.0/20
    MinLength: '10'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"

  # Remote Access Network
  RemoteCidrForSecurityGroup:
    Description: CIDR Block for SG to Grant Access to Instances (i.e. 192.168.100.0/24)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 172.23.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  RemoteCidrForPublicAcl:
    Description: CIDR Block for Public ACL to Grant Access to Network (i.e. 32.159.24.111/32)
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.

  # Rule Numbers
  AllowAllInboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllInboundPrivateRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPublicRuleNumber:
    Type: Number
    Default: '100'
  AllowAllOutboundPrivateRuleNumber:
    Type: Number
    Default: '100'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EKS Cluster"
        Parameters:
          - ClusterName
          - ClusterVersion
      -
        Label:
          default: "Worker Node Configuration"
        Parameters:
          - NodeGroupName
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArguments
      -
        Label:
          default: "Worker Network Configuration"
        Parameters:
          - NewVpc
          - VpcId
          - Subnets
      - Label:
          default: Remote Access
        Parameters:
        - RemoteCidrForSecurityGroup
        - RemoteCidrForPublicAcl
      - Label:
          default: Subnets
        Parameters:
        - VPCSubnetCidrBlock
        - PublicSubnetCidrBlock1
        - PublicSubnetCidrBlock2
        - PublicSubnetCidrBlock3
        - PrivateSubnetCidrBlock1
        - PrivateSubnetCidrBlock2
        - PrivateSubnetCidrBlock3
        - AvailabilityZone1
        - AvailabilityZone2
        - AvailabilityZone3
      - Label:
          default: Public ACL Rule Numbers
        Parameters:
        - AllowAllInboundPublicRuleNumber
        - AllowAllOutboundPublicRuleNumber
      - Label:
          default: Private ACL Rule Numbers
        Parameters:
        - AllowAllInboundPrivateRuleNumber
        - AllowAllOutboundPrivateRuleNumber

Conditions:
  CreateVpc:
    Fn::Equals:
      - Ref: NewVpc
      - new

  DoNotCreateVpc:
    Fn::Equals:
      - Ref: NewVpc
      - existing

  PublicNodes:
    Fn::Equals:
      - Ref: NodePublicIpAddress
      - 'true'

Resources:

  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'opsworks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName:
            Fn::Sub: ${AWS::StackName}-OpsWorksDefaultPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:*'
                  - 'iam:PassRole'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:DescribeAlarms'
                  - 'elasticloadbalancing:*'
                  - 'ecs:*'
                  - 'rds:*'
                Resource: '*'

  OpsWorksStack: 
    Type: AWS::OpsWorks::Stack
    Properties: 
      AgentVersion: LATEST
      Name: 
        Ref: OpsWorksStackName
      ServiceRoleArn: 
        Fn::GetAtt:
          - ServiceRole
          - Arn
      DefaultInstanceProfileArn: 
        Fn::GetAtt:
          - NodeInstanceProfile
          - Arn
      ConfigurationManager:
        Name: Chef
        Version: '12'
      UseCustomCookbooks: 'false'
      DefaultSubnetId:
        Fn::If:
          - CreateVpc
          - Fn::If:
            - PublicNodes
            - Ref: PublicSubnet1
            - Ref: PrivateSubnet1
          - Fn::Select:
              - '0'
              - Ref: Subnets
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      UseOpsworksSecurityGroups: 'false'
      DefaultOs: Amazon Linux 2
      DefaultRootDeviceType: ebs
      Tags:
        - Key: Application
          Value: k8s
        - Key: MaintainerName
          Value: Marius Mitrofan
        - Key: MaintainerTeam
          Value: NETBEARS
        - Key: MaintainerEmail
          Value: support@netbears.com

  Layer:
    Type: AWS::OpsWorks::Layer
    Properties:
      Name: k8s
      Shortname: k8s-
      Type: custom
      EnableAutoHealing: 'false'
      AutoAssignElasticIps: 'false'
      AutoAssignPublicIps:
        Ref: NodePublicIpAddress
      StackId:
        Ref: OpsWorksStack
      UseEbsOptimizedInstances: True
      CustomSecurityGroupIds:
        - Fn::GetAtt: NodeSecurityGroup.GroupId

  AWSServiceRoleForAmazonEKS:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  AWSEKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name:
        Ref: ClusterName
      Version:
        Ref: ClusterVersion
      RoleArn:
        Fn::GetAtt: AWSServiceRoleForAmazonEKS.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - Ref: ClusterControlPlaneSecurityGroup
        SubnetIds:
          Fn::If:
            - CreateVpc
            - 
              - Ref: PublicSubnet1
              - Ref: PublicSubnet2
              - Ref: PublicSubnet3
            - Ref: Subnets

  ClusterControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription:
        Fn::Sub: ${AWS::StackName}-Sg
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId

  ClusterControlPlaneSecurityGroupIngressToNode:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ClusterControlPlaneSecurityGroupIngressToInternet:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodeInstanceProfile:
    DependsOn: AWSEKSCluster
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - Ref: NodeInstanceRole

  NodeInstanceRole:
    DependsOn: AWSEKSCluster
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - logs.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSOpsWorksRegisterCLI_OnPremises
      Policies:
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-OpsWorks
        PolicyDocument:
          Statement:
          - Action:
            - opsworks:*
            Resource: "*"
            Effect: Allow
      - PolicyName:
          Fn::Sub: ${AWS::StackName}-sts
        PolicyDocument:
          Statement:
          - Action:
            - sts:AssumeRole
            Resource: "*"
            Effect: Allow

  NodeSecurityGroup:
    DependsOn: AWSEKSCluster
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        Fn::If:
          - CreateVpc
          - Ref: VPC
          - Ref: VpcId
      Tags:
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: 'owned'

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      SourceSecurityGroupId:
        Ref: ClusterControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodeSecurityGroupSshIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId:
        Ref: NodeSecurityGroup
      CidrIp: 0.0.0.0/0
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      DestinationSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Ref: ClusterControlPlaneSecurityGroup
      SourceSecurityGroupId:
        Ref: NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: AWSEKSCluster
    Properties:
      DesiredCapacity:
        Ref: NodeAutoScalingGroupMinSize
      LaunchConfigurationName:
        Ref: NodeLaunchConfig
      MinSize:
        Ref: NodeAutoScalingGroupMinSize
      MaxSize:
        Ref: NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier:
        Fn::If:
          - CreateVpc
          - Fn::If:
            - PublicNodes
            - 
              - Ref: PublicSubnet1
              - Ref: PublicSubnet2
              - Ref: PublicSubnet3
            - 
              - Ref: PrivateSubnet1
              - Ref: PrivateSubnet2
              - Ref: PrivateSubnet3
          - Ref: Subnets
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${ClusterName}-${NodeGroupName}-Node"
        PropagateAtLaunch: 'true'
      - Key:
          Fn::Sub: 'kubernetes.io/cluster/${ClusterName}'
        Value: 'owned'
        PropagateAtLaunch: 'true'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService:
          Ref: NodeAutoScalingGroupMinSize
        PauseTime: 'PT5M'

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: AWSEKSCluster
    Properties:
      AssociatePublicIpAddress:
        Ref: NodePublicIpAddress
      IamInstanceProfile:
        Ref: NodeInstanceProfile
      ImageId:
        Ref: NodeImageId
      InstanceType:
        Ref: NodeInstanceType
      KeyName:
        Ref: KeyName
      SecurityGroups:
      - Ref: NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize:
              Ref: NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash
            set -o xtrace
            yum install -y jq awscli
            aws opsworks register --infrastructure-class ec2 --region us-east-1 --stack-id ${OpsWorksStack} --local --use-instance-profile
            sleep 60
            ec2_instance_id=$(wget -q -O - http://169.254.169.254/latest/meta-data/instance-id) && \
              instance=$(aws opsworks describe-instances --region us-east-1 --stack-id ${OpsWorksStack} | jq --arg ec2_instance_id "$ec2_instance_id" '.Instances[] | select (.Ec2InstanceId==$ec2_instance_id)' | jq -r .Arn | cut -d'/' -f2) && \
              aws opsworks assign-instance --instance-id $instance --layer-ids ${Layer} --region us-east-1
            /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup \
                     --region ${AWS::Region}

  VPC:
    Condition: CreateVpc
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock:
        Ref: VPCSubnetCidrBlock
      Tags:
      - Key: Name
        Value:
          Ref: "AWS::StackName"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared

  PublicSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-publiz-az1"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'

  PublicSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az2"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'

  PublicSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      MapPublicIpOnLaunch: true
      CidrBlock:
        Ref: PublicSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-az3"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/elb
        Value: '1'

  InternetGateway:
    Condition: CreateVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-InternetGateway"

  GatewayToInternet:
    Condition: CreateVpc
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
    - InternetGateway
    - VPC
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway

  NatGateway:
    Condition: CreateVpc
    Type: AWS::EC2::NatGateway
    DependsOn: GatewayToInternet
    Properties:
      AllocationId:
        Fn::GetAtt:
        - EIP
        - AllocationId
      SubnetId:
        Ref: PublicSubnet1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-NatGateway"

  EIP:
    Condition: CreateVpc
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC

  PublicRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public"

  PublicRoute:
    Condition: CreateVpc
    Type: AWS::EC2::Route
    DependsOn:
    - PublicRouteTable
    - InternetGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet1
    - PublicRouteTable
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet2
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PublicSubnet3
    - PublicRouteTable
    - GatewayToInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable

  PrivateSubnet1:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone1}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock1
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az1"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/internal-elb
        Value: '1'

  PrivateSubnet2:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone2}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock2
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az2"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/internal-elb
        Value: '1'

  PrivateSubnet3:
    Condition: CreateVpc
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Sub: "${AWS::Region}${AvailabilityZone3}"
      CidrBlock:
        Ref: PrivateSubnetCidrBlock3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-az3"
      - Key:
          Fn::Sub: "kubernetes.io/cluster/${ClusterName}"
        Value: shared
      - Key: kubernetes.io/role/internal-elb
        Value: '1'

  PrivateRouteTable:
    Condition: CreateVpc
    Type: AWS::EC2::RouteTable
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private"

  PrivateRoute:
    Condition: CreateVpc
    DependsOn:
    - PrivateRouteTable
    - NatGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway

  PrivateSubnetRouteTableAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable

  PrivateSubnetRouteTableAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateRouteTable
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable

  S3VpcEndpoint:
    Condition: CreateVpc
    Type: AWS::EC2::VPCEndpoint
    DependsOn:
    - VPC
    - PrivateRouteTable
    - PublicRouteTable
    Properties:
      PolicyDocument:
        Statement:
        - Action: "*"
          Effect: Allow
          Resource: "*"
          Principal: "*"
      RouteTableIds:
      - Ref: PrivateRouteTable
      - Ref: PublicRouteTable
      ServiceName:
        Fn::Sub: "com.amazonaws.${AWS::Region}.s3"
      VpcId:
        Ref: VPC

  # Public Network ACL
  PublicNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-public-acl"
      
  # Public Network ACL Rules
  InboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPublicRuleNumber
      Protocol: '-1'
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPublicNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PublicNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PublicNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPublicRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Public Subnet Association
  PublicSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet1
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet2
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      NetworkAclId:
        Ref: PublicNetworkAcl

  PublicSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PublicSubnet3
    - PublicNetworkAcl
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      NetworkAclId:
        Ref: PublicNetworkAcl

  # Private Network ACL
  PrivateNetworkAcl:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAcl
    DependsOn: VPC
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-private-acl"
      
  # Private Network ACL Rules
  InboundEphemeralPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllInboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'false'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  OutboundPrivateNetworkAclAllowAll:
    Condition: CreateVpc
    Type: AWS::EC2::NetworkAclEntry
    DependsOn: PrivateNetworkAcl
    Properties:
      NetworkAclId:
        Ref: PrivateNetworkAcl
      RuleNumber:
        Ref: AllowAllOutboundPrivateRuleNumber
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: '0'
        To: '65535'

  # Private Subnet Associations
  PrivateSubnetNetworkAclAssociation1:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet1
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation2:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet2
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      NetworkAclId:
        Ref: PrivateNetworkAcl

  PrivateSubnetNetworkAclAssociation3:
    Condition: CreateVpc
    Type: AWS::EC2::SubnetNetworkAclAssociation
    DependsOn:
    - PrivateSubnet3
    - PrivateNetworkAcl
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      NetworkAclId:
        Ref: PrivateNetworkAcl

  # Security Groups
  InternalAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    DependsOn: VPC
    Properties:
      GroupDescription: Instance to Instance Access in VPC
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-instance-to-instance"

  InternalAccessSecurityGroupIngress:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: InternalAccessSecurityGroup
    Properties:
      GroupId:
        Ref: InternalAccessSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId:
        Ref: InternalAccessSecurityGroup

  RemoteAccessSecurityGroup:
    Condition: CreateVpc
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Instance Access over VPN/Direct Connect
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: "${AWS::StackName}-remote-to-instance"
      SecurityGroupIngress:
      - IpProtocol: "-1"
        CidrIp:
          Ref: RemoteCidrForSecurityGroup
      SecurityGroupEgress:
      - IpProtocol: "-1"
        CidrIp: 0.0.0.0/0

Outputs:
  GetKubeconfigProfile:
    Description: Command to get kubeconfig
    Value:
      Fn::Sub: aws eks --region ${AWS::Region} update-kubeconfig --name ${ClusterName}
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-GetKubeconfigProfile"

  NodeInstanceRole:
    Description: The node instance role
    Value:
      Fn::GetAtt: NodeInstanceRole.Arn
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeInstanceRole"
  NodeSecurityGroup:
    Description: The security group for the node group
    Value:
      Ref: NodeSecurityGroup
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-NodeSecurityGroup"
  Endpoint:
    Description: The endpoint to which you should connect
    Value:
      Fn::GetAtt: AWSEKSCluster.Endpoint
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Endpoint"
  Context:
    Description: The context to use in kubeconfig
    Value:
      Fn::Sub: "arn:aws:eks:${AWS::Region}:${AWS::AccountId}:cluster/${ClusterName}"
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Context"