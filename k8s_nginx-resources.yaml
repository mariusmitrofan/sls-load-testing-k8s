---
###--------NGINX DEPLOYMENT--------###
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: nginx
    release: nginx-release
  name: nginx
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: nginx
      release: nginx-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9913"
        prometheus.io/scrape: "true"
      labels:
        app: nginx
        release: nginx-release
      namespace: default
    spec:
      automountServiceAccountToken: false
      containers:
      - image: netbears/nginx-vts:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: nginx
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ping
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 64Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /etc/nginx/conf.d/
          name: config-volume
      - image: netbears/nginx-vts-exporter:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 9913
            scheme: HTTP
          initialDelaySeconds: 15
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: metrics
        ports:
        - containerPort: 9913
          name: metrics
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /metrics
            port: 9913
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          limits:
            cpu: 250m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 16Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: nginx
        name: config-volume

---
###--------NGINX SERVICE--------###
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: default
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  ports:
  - name: metrics
    port: 9913
    protocol: TCP
    targetPort: 9913
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: nginx
  sessionAffinity: None
  type: LoadBalancer

---
###--------NGINX CONFIGMAP--------###
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx
  namespace: default
  labels:
    app: nginx
data:
  nginx-sample.conf: |-
    upstream whoami {
      server whoami;
    }
    server {
      listen 80 default_server;

      location / {
        proxy_pass http://whoami;
      }
    }

---
###--------NGINX SERVICEMONITOR--------###
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: monitoring
spec:
  endpoints:
  - interval: 15s
    port: metrics
  jobLabel: nginx
  namespaceSelector:
    matchNames:
    - default
  selector:
    matchLabels:
      app: nginx
---
###--------WHOAMI DEPLOYMENT--------###
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: whoami
    release: whoami-release
  name: whoami
  namespace: default
spec:
  progressDeadlineSeconds: 600
  replicas: 5
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: whoami
      release: whoami-release
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: whoami
        release: whoami-release
      namespace: default
    spec:
      automountServiceAccountToken: false
      containers:
      - image: mmitrofan/whoami:latest
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 6
          httpGet:
            path: /livenessProbe
            port: 80
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        name: whoami
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /readinessProbe
            port: 80
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      shareProcessNamespace: false
      terminationGracePeriodSeconds: 30
---
###--------WHOAMI SERVICE--------###
apiVersion: v1
kind: Service
metadata:
  labels:
    app: whoami
  name: whoami
  namespace: default
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: http
  selector:
    app: whoami
  sessionAffinity: None
  type: ClusterIP